//=============================================================================
// File      : Med_Gen.idl
// Project   : SALOME
// Copyright : EDF 2001
//=============================================================================

#ifndef _Med_GEN_IDL_
#define _Med_GEN_IDL_


#include "SALOME_Exception.idl"
#include "SALOME_Component.idl"
#include "SALOMEDS.idl"
#include "MED.idl"

module SALOME_MED
{
  interface MED_Gen : Engines::Component, SALOMEDS::Driver
  {
    /*!
      it returns a Corba pointer %MESH on the mesh stored in the .med file
      <VAR>fileName</VAR> with the name <VAR>meshName</VAR>.
     */
    SALOME_MED::MESH readMeshInFile(in string fileName, in string studyName,
				    in string meshName)
      raises(SALOME::SALOME_Exception);

    /*!
      it returns a Corba pointer %FIELD on the field instance with the order
      <VAR>ordre</VAR> at the iteration <VAR>iter</VAR>, stored in the .med
      file <VAR>fileName</VAR> with the name <VAR>fieldName</VAR>.
     */
    SALOME_MED::FIELD readFieldInFile(in string fileName, in string studyName,
				      in string fieldName, in long ordre,
				      in long iter)
      raises (SALOME::SALOME_Exception);

    /*!
      it returns a Corba pointer on the %MED object regrouping all objects
      (%MESH and %FIELD) stored in the file <VAR>fileName</VAR>. All instances
      of the fields are stored without their type.
    */
    SALOME_MED::MED readStructFile(in string fileName,
				   in string studyName)
      raises (SALOME::SALOME_Exception);

    /*!
      It pushes all Corba pointers (%MED, %MESH, %FIELD) in the study named
      <VAR>studyName</VAR>. The %MED object regroups all objects
      (%MESH and %FIELD) stored in the file <VAR>fileName</VAR> and all
      instances of the fields are stored with their own type.
    */
    void readStructFileWithFieldType(in string fileName,
				     in string studyName)
      raises (SALOME::SALOME_Exception);
  };

};

#endif
