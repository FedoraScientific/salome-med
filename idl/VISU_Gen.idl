// File :      VISU_Gen.idl
// Created :   
// Author :    Alexey Petrov
// Project :   SALOME
// Copyright : OPEN CASCADE
// $HEADERS:


#ifndef __VISU_GEN__
#define __VISU_GEN__

#include "SALOME_Exception.idl"
#include "SALOME_Component.idl"
#include "SALOMEDS.idl"

module VISU {
  interface ViewManager;
  interface PrsObject;
  interface Med;
  interface VISU_Gen : Engines::Component, SALOMEDS::Driver {
    ViewManager GetViewManager(); 
    Med ImportMed(in string theFileName);
    PrsObject ScalarMap(in Med theMed, in string theFieldName); 
    PrsObject DeformedShape(in Med theMed, in string theFieldName); 
    PrsObject Vectors(in Med theMed, in string theFieldName); 
    PrsObject IsoSurfaces(in Med theMed, in string theFieldName); 
    PrsObject CutPlanes(in Med theMed, in string theFieldName); 
  };
  interface Med {
  };
  interface View;
  interface ViewManager{
    View GetActiveView();
    View Create3DView();
  };
  typedef unsigned short Color[3];
  interface View{
    unsigned long GetID();

    void SetTitle(in string theTitle);
    string GetTitle();

    void SetBackground(in Color theColor);
    Color GetBackground();
    
    void Minimize();
    void Restore();
    void Maximize();

    void EraseAll();
    void DisplayAll();
    void Erase(in PrsObject thePrsObj);
    void Display(in PrsObject thePrsObj);
    void DisplayOnly(in PrsObject thePrsObj);
  };
  interface View3D{
    enum ViewType{ FRONT, BACK, LEFT, RIGHT, TOP, BOTTOM};
    enum ScaleType{ NOSCALE, SCALEFACTOR, LOGARITHM};
    enum Axis{ X, Y, Z};
    typedef double XYZ[3];

    void PanView(in double dX, in double dY);  //?
    void Zoom(in double theScale);
    void FitAll();
    void SetView(in ViewType theType);

    void SetPointOfView(in XYZ theCoord);
    XYZ GetPointOfView();

    void SetDirectionOfView(in XYZ theDir);
    XYZ GetDirectionOfView();
    
    void ScaleView(in ScaleType theType, in Axis theAxis, in double theParam);
    void RemoveScale();
  };
  interface PrsObject{
    unsigned long GetID();
    unsigned long GetTypeID();
  };
  interface ScalarMap : PrsObject{
    void SetRange(in double theMin, in double theMax);
    double GetMin();
    double GetMax();

    enum Orientation{ HORIZONTAL, VERTICAL};
    void SetOrientatin(in Orientation theOrient);

    void SetPosition(in double theX, in double theY);
    double GetPosX();
    double GetPosY();
    
    void SetSize(in double theWidth, in double theHeight);
    double GetWidth();
    double GetHeight();
    
    void SetColors(in unsigned long theNbColors);
    unsigned long GetColors();
    
    void SetLabels(in unsigned long theNbLabels);
    unsigned long GetLabels();
    
    void SetTitle(in string theLabel);
    string GetTitle();
  };
  interface IsoSurfaces : ScalarMap{
    void SetSurfacesNb(in unsigned long theNbSurf);
    unsigned long GetSurfacesNb();
  };
};
#endif
