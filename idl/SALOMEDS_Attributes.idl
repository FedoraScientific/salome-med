//=====================================================
//  File      : SALOMEDS.idl
//  Created   : Thu Jul 4 19:25:39 2002
//  Author    : Yves FRICAUD
//  Project   : SALOME
//  Copyright : Open CASCADE 2002
//  $Header$
//=====================================================
//The following attributes can be assigned to SObject
//=====================================================

#ifndef _SALOMEDS_AttributesIDL_
#define _SALOMEDS_AttributesIDL_

#include "SALOMEDS.idl"

module SALOMEDS
{
  typedef sequence <double> DoubleSeq;
  typedef sequence <long>   LongSeq;
  typedef sequence <string> StringSeq;
  struct Color {
   double R;
   double G;
   double B;
  };
  //==========================================================================
  //Attribute to store real value
  //==========================================================================
  interface AttributeReal : GenericAttribute
  {
    double Value();
    void   SetValue(in double value);
  };
  
  //==========================================================================
  //Attribute to store integer value
  //==========================================================================
  interface AttributeInteger : GenericAttribute
  {
    long   Value();
    void   SetValue(in long value);
  };

  //==========================================================================
  //Attribute - sequence of real, indexing from 1 (like in CASCADE)
  //==========================================================================
  interface AttributeSequenceOfReal : GenericAttribute
  {
    void      Assign (in DoubleSeq other);
    DoubleSeq CorbaSequence();
    void      Add (in double value);
    void      Remove(in long index);
    void      ChangeValue(in long index, in double value);
    double    Value(in short index);
    long      Length();
  };
  
  //==========================================================================
  //Attribute - sequence of integer, indexing from 1 (like in CASCADE)
  //==========================================================================
  interface AttributeSequenceOfInteger : GenericAttribute
  {
    void      Assign (in LongSeq other);
    LongSeq CorbaSequence();
    void      Add (in long value);
    void      Remove(in long index);
    void      ChangeValue(in long index, in long value);
    long      Value(in short index);
    long      Length();
  };
  
  //==========================================================================
  //Name attribute
  //==========================================================================
  
  interface AttributeName : GenericAttribute
  {
    string Value();
    void   SetValue(in string value);
  };
  
  //==========================================================================
  //Comment attribute
  //==========================================================================
  interface AttributeComment : GenericAttribute
  {
    string Value();
    void   SetValue(in string value);
  };
  
  //==========================================================================
  //IOR attribute
  //==========================================================================
  interface AttributeIOR : GenericAttribute
  {
    string Value();
    void   SetValue(in string value);
  };

  //==========================================================================
  //Persistent reference attribute
  //==========================================================================
  interface AttributePersistentRef : GenericAttribute
  {
    string Value();
    void   SetValue(in string value);
  };


  //==========================================================================
  //Below the list of presentation attributes for display study tree in browser
  //==========================================================================


  //==========================================================================
  //Drawable flag. The item
  //associated to SObject is created/displayed if TRUE.
  //==========================================================================
  interface AttributeDrawable : GenericAttribute
  {
    boolean IsDrawable();
    void   SetDrawable(in boolean value);
  };
  
  //==========================================================================
  //Selectable flag. he item is selectable
  //by SALOME selection mechanism if TRUE
  //==========================================================================
  interface AttributeSelectable : GenericAttribute
  {
    boolean IsSelectable();
    void   SetSelectable(in boolean value);
  };
  
  //==========================================================================
  //Expandable flag. Sets this item to be
  //expandable even if it has no children if value is TRUE. If value is FALSEe
  //expandable only if it has children
  //==========================================================================
  interface AttributeExpandable : GenericAttribute
  {
    boolean IsExpandable();
    void   SetExpandable(in boolean value);
  };
  
  //==========================================================================
  //Opened flag. Sets this item to be open (its
  //children are visible) if bool is TRUE, and to be closed (its children
  //are not visible) if bool is FALSE.
  //==========================================================================
  interface AttributeOpened : GenericAttribute
  {
    boolean IsOpened();
    void   SetOpened(in boolean value);
  };
  
  //==========================================================================
  //TextColorAttribute. Sets item's color.
  //==========================================================================
  interface AttributeTextColor : GenericAttribute
  {
    Color TextColor();
    void   SetTextColor(in Color value);
  };
  
  
  //==========================================================================
  //TextHighlightColorAttribute. Sets item's highlight color.
  //==========================================================================
  interface AttributeTextHighlightColor : GenericAttribute
  {
    Color TextHighlightColor();
    void   SetTextHighlightColor(in Color value);
  };
	
  //==========================================================================
  //PixMapAttribute. Shows an icon before the name of items.
  //==========================================================================
  interface AttributePixMap : GenericAttribute
  {
    boolean HasPixMap();
    string  GetPixMap();
    void    SetPixMap(in string value);
  };
	
  //==========================================================================
  //TreeNodeAttribute. Auxiliary tree item.
  //==========================================================================
  interface AttributeTreeNode : GenericAttribute
  {
    void              SetFather(in AttributeTreeNode value);
    boolean           HasFather();
    AttributeTreeNode GetFather();

    void              SetPrevious(in AttributeTreeNode value);
    boolean           HasPrevious();
    AttributeTreeNode GetPrevious();

    void              SetNext(in AttributeTreeNode value);
    boolean           HasNext();
    AttributeTreeNode GetNext();

    void              SetFirst(in AttributeTreeNode value);
    boolean           HasFirst();
    AttributeTreeNode GetFirst();

    void              SetTreeID(in string value);
    string            GetTreeID();

    void              Append(in AttributeTreeNode value);
    void              Prepend(in AttributeTreeNode value);
    void              InsertBefore(in AttributeTreeNode value);
    void              InsertAfter(in AttributeTreeNode value);
    void              Remove();
    
    long              Depth();
    boolean           IsRoot();
    boolean           IsDescendant(in AttributeTreeNode value);
    boolean           IsFather(in AttributeTreeNode value);
    boolean           IsChild(in AttributeTreeNode value);

    string            Label();
  };

  //==========================================================================
  //Attribute to describe link between a SO and a local object in the component
  //==========================================================================
  interface AttributeLocalID : GenericAttribute
  {
    long   Value();
    void   SetValue(in long value);
  };

  //==========================================================================
  //Attribute to store GUID
  //==========================================================================
  interface AttributeUserID : GenericAttribute
  {
    string Value();
    void   SetValue(in string value);
  };

  //==========================================================================
  //Attribute to store referenced SObjects to the accorded SObject
  //==========================================================================

  interface AttributeTarget : GenericAttribute
  {
    void          Add(in SObject anObject);
    SALOMEDS::Study::ListOfSObject Get();
    void          Remove(in SObject anObject);
  };

  //==========================================================================
  //Attribute to store table of integers (indexing from 1 (like in CASCADE))
  // and string titles: of table, of each row, of each column
  //==========================================================================

  interface AttributeTableOfInteger : GenericAttribute
  {
    exception IncorrectIndex {};
    exception IncorrectArgumentLength {};

    // titles: for table, for each row, for each column
    void SetTitle(in string theTitle);
    string GetTitle();
    void SetRowTitle(in long theIndex, in string theTitle) raises(IncorrectIndex);
    void SetRowTitles(in StringSeq theTitles) raises(IncorrectArgumentLength);
    StringSeq GetRowTitles();
    void SetColumnTitle(in long theIndex, in string theTitle) raises(IncorrectIndex);
    void SetColumnTitles(in StringSeq theTitles) raises(IncorrectArgumentLength);
    StringSeq GetColumnTitles();

    //Rows units
    void SetRowUnit(in long theIndex, in string theUnit) raises(IncorrectIndex);
    void SetRowUnits(in StringSeq theUnits) raises(IncorrectArgumentLength);
    StringSeq GetRowUnits();

    // table information
    long GetNbRows();
    long GetNbColumns();

    // operations with rows
    void AddRow(in LongSeq theData) raises(IncorrectArgumentLength);
    void SetRow(in long theRow, in LongSeq theData) raises(IncorrectArgumentLength, IncorrectIndex);
    LongSeq GetRow(in long theRow) raises(IncorrectIndex);

    // operations with columns
    void AddColumn(in LongSeq theData) raises(IncorrectArgumentLength);
    void SetColumn(in long theColumn, in LongSeq theData) raises(IncorrectArgumentLength, IncorrectIndex);
    LongSeq GetColumn(in long theColumn) raises(IncorrectIndex);

    // operations with elements
    void PutValue(in long theValue, in long theRow, in long theColumn) raises(IncorrectIndex);
    boolean HasValue(in long theRow, in long theColumn);
    long GetValue(in long theRow, in long theColumn) raises(IncorrectIndex);

    // operations with files
    void ReadFromFile(in URL theURL) raises (NotImplemented);
    void SaveToFile(in URL theURL) raises (NotImplemented);
  };

  //==========================================================================
  //Attribute to store table of reals (indexing from 1 (like in CASCADE))
  // and string titles: of table, of each row, of each column
  //==========================================================================

  interface AttributeTableOfReal : GenericAttribute
  {
    exception IncorrectIndex {};
    exception IncorrectArgumentLength {};

    // titles: for table, for each row, for each column
    void SetTitle(in string theTitle);
    string GetTitle();
    void SetRowTitle(in long theIndex, in string theTitle) raises(IncorrectIndex);
    void SetRowTitles(in StringSeq theTitles) raises(IncorrectArgumentLength);
    StringSeq GetRowTitles();
    void SetColumnTitle(in long theIndex, in string theTitle) raises(IncorrectIndex);
    void SetColumnTitles(in StringSeq theTitles) raises(IncorrectArgumentLength);
    StringSeq GetColumnTitles();

    //Rows units
    void SetRowUnit(in long theIndex, in string theUnit) raises(IncorrectIndex);
    void SetRowUnits(in StringSeq theUnits) raises(IncorrectArgumentLength);
    StringSeq GetRowUnits();

    // table information
    long GetNbRows();
    long GetNbColumns();

    // operations with rows
    void AddRow(in DoubleSeq theData) raises(IncorrectArgumentLength);
    void SetRow(in long theRow, in DoubleSeq theData) raises(IncorrectArgumentLength, IncorrectIndex);
    DoubleSeq GetRow(in long theRow) raises(IncorrectIndex);

    // operations with columns
    void AddColumn(in DoubleSeq theData) raises(IncorrectArgumentLength);
    void SetColumn(in long theColumn, in DoubleSeq theData) raises(IncorrectArgumentLength, IncorrectIndex);
    DoubleSeq GetColumn(in long theColumn) raises(IncorrectIndex);

    // operations with elements
    void PutValue(in double theValue, in long theRow, in long theColumn) raises(IncorrectIndex);
    boolean HasValue(in long theRow, in long theColumn);
    double GetValue(in long theRow, in long theColumn) raises(IncorrectIndex);

    // operations with files
    void ReadFromFile(in URL theURL) raises (NotImplemented);
    void SaveToFile(in URL theURL) raises (NotImplemented);
  };

  //==========================================================================
  //Attribute to store study properties: user name, creation date, creation
  // mode, modified flag, locked flag
  //==========================================================================

  interface AttributeStudyProperties : GenericAttribute
  {
    void SetUserName(in string theName);
    // returns  null string, if user name is not set
    string GetUserName();
    void SetCreationDate(in long theMinute, in long theHour, in long theDay, in long theMonth, in long theYear);
    // returns false, if creation mode is not set
    boolean GetCreationDate(out long theMinute, out long theHour, out long theDay, out long theMonth, out long theYear);
    // creation mode must be: "from scratch" or "copy from"
    void SetCreationMode(in string theMode);
    // returns creation mode: "from scratch", "copy from", or null string if creation mode is not set
    string GetCreationMode();
    void SetModified(in long theModified);
    // returns true, if document is modified and not saved 
    boolean IsModified();
    long GetModified();
    void SetLocked(in boolean theLocked);
    boolean IsLocked();
    
    // this method appends modification parameters to the modifications list
    void SetModification(in string theName, in long theMinute, in long theHour, in long theDay, in long theMonth, in long theYear);
    // this method returns list of: mosdifiers user names, modification dates
    void GetModificationsList(out StringSeq theNames, out LongSeq theMinutes, out LongSeq theHours, out LongSeq theDays, out LongSeq theMonths, out LongSeq theYears, in boolean theWithCreator);
  };

  //==========================================================================
  //Attribute to store pyton objects as the char sequence
  //==========================================================================

  interface AttributePythonObject : GenericAttribute
  {
    void SetObject(in string theSequence, in boolean IsScript);
    string GetObject();
    boolean IsScript();
  };
};
#endif
